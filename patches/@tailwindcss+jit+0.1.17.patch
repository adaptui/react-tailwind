diff --git a/node_modules/@tailwindcss/jit/src/lib/generateRules.js b/node_modules/@tailwindcss/jit/src/lib/generateRules.js
index fe48a0d..28abdf5 100644
--- a/node_modules/@tailwindcss/jit/src/lib/generateRules.js
+++ b/node_modules/@tailwindcss/jit/src/lib/generateRules.js
@@ -94,12 +94,15 @@ function applyImportant(matches) {
 // and `focus:hover:text-center` in the same project, but it doesn't feel
 // worth the complexity for that case.
 
-function applyVariant(variant, matches, context) {
+function applyVariant(variant, matches, hasLibVariant, context) {
   if (matches.length === 0) {
     return matches
   }
 
   if (context.variantMap.has(variant)) {
+    let updateSort =
+      hasLibVariant &&
+      !['sm', 'md', 'lg', 'xl', '2xl', 'motion-safe', 'dark', 'motion-reduce'].includes(variant)
     let [variantSort, applyThisVariant] = context.variantMap.get(variant)
     let result = []
 
@@ -139,7 +142,10 @@ function applyVariant(variant, matches, context) {
         continue
       }
 
-      let withOffset = [{ sort: variantSort | sort, layer, options }, container.nodes[0]]
+      let withOffset = [
+        { sort: updateSort ? 0n : variantSort | sort, layer, options },
+        container.nodes[0],
+      ]
       result.push(withOffset)
     }
 
@@ -200,6 +206,7 @@ function sortAgainst(toSort, against) {
 function* resolveMatches(candidate, context) {
   let separator = context.tailwindConfig.separator
   let [classCandidate, ...variants] = candidate.split(separator).reverse()
+  let hasLibVariant = variants.includes('lib')
   let important = false
 
   if (classCandidate.startsWith('!')) {
@@ -231,7 +238,14 @@ function* resolveMatches(candidate, context) {
         for (let ruleSet of [].concat(plugin(modifier, pluginHelpers))) {
           let [rules, options] = parseRules(ruleSet, context.postCssNodeCache)
           for (let rule of rules) {
-            matches.push([{ ...sort, options: { ...sort.options, ...options } }, rule])
+            matches.push([
+              {
+                ...sort,
+                options: { ...sort.options, ...options },
+                sort: hasLibVariant ? 0n : sort.sort,
+              },
+              rule,
+            ])
           }
         }
       }
@@ -240,7 +254,14 @@ function* resolveMatches(candidate, context) {
         let ruleSet = plugin
         let [rules, options] = parseRules(ruleSet, context.postCssNodeCache)
         for (let rule of rules) {
-          matches.push([{ ...sort, options: { ...sort.options, ...options } }, rule])
+          matches.push([
+            {
+              ...sort,
+              options: { ...sort.options, ...options },
+              sort: hasLibVariant ? 0n : sort.sort,
+            },
+            rule,
+          ])
         }
       }
     }
@@ -252,7 +273,7 @@ function* resolveMatches(candidate, context) {
     }
 
     for (let variant of variants) {
-      matches = applyVariant(variant, matches, context)
+      matches = applyVariant(variant, matches, hasLibVariant, context)
     }
 
     for (let match of matches) {
diff --git a/node_modules/@tailwindcss/jit/src/lib/setupContext.js b/node_modules/@tailwindcss/jit/src/lib/setupContext.js
index 65538d0..27c9c4b 100644
--- a/node_modules/@tailwindcss/jit/src/lib/setupContext.js
+++ b/node_modules/@tailwindcss/jit/src/lib/setupContext.js
@@ -613,10 +613,11 @@ function collectLayerPlugins(root) {
 function registerPlugins(tailwindConfig, plugins, context) {
   let variantList = []
   let variantMap = new Map()
+  let reservedBits = 20n
   let offsets = {
-    base: 0n,
-    components: 0n,
-    utilities: 0n,
+    base: (1n << reservedBits) << 0n,
+    components: (1n << reservedBits) << 1n,
+    utilities: (1n << reservedBits) << 2n,
   }
 
   let pluginApi = buildPluginApi(tailwindConfig, context, {
@@ -640,7 +641,7 @@ function registerPlugins(tailwindConfig, plugins, context) {
     offsets.components,
     offsets.utilities,
   ])
-  let reservedBits = BigInt(highestOffset.toString(2).length)
+  reservedBits = BigInt(highestOffset.toString(2).length)
 
   context.layerOrder = {
     base: (1n << reservedBits) << 0n,
@@ -649,10 +650,10 @@ function registerPlugins(tailwindConfig, plugins, context) {
   }
 
   reservedBits += 3n
-  context.variantOrder = variantList.reduce(
-    (map, variant, i) => map.set(variant, (1n << BigInt(i)) << reservedBits),
-    new Map()
-  )
+  context.variantOrder = variantList.reduce((map, variant, i) => {
+     if (variant.includes('lib')) return map.set(variant, 1n)
+     return map.set(variant, (1n << BigInt(i)) << reservedBits)
+   }, new Map())
 
   context.minimumScreen = [...context.variantOrder.values()].shift()
 
